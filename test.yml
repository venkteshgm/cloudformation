AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create network resources - VPC, Subnets, IGW, Routing Tables, Load Balancer and DNS for Route53
Parameters:
  VpcCIDR:
    Description: CIDR block for this VPC
    Type: String
    Default: "10.0.0.0/16"
  PublicSubnet1CIDR:
    Description: IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Description: IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24
  PublicSubnet3CIDR:
    Description: IP range (CIDR notation) for the public subnet in the third Availability Zone
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet1CIDR:
    Description: IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.4.0/24
  PrivateSubnet2CIDR:
    Description: IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.5.0/24
  PrivateSubnet3CIDR:
    Description: IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    Default: 10.0.6.0/24
  RootVolumeType:
    Description: EBS volume type
    Type: String
    Default: gp2
  RootVolumeSize:
    Description: EBS volume size
    Type: Number
    Default: 20
  instanceType:
    Description: EC2 Instance type
    Type: String
    Default: t2.micro
  imageId:
    Description: EC2 Instance ID
    Type: String
    Default: ami-033b95fb8079dc481
  BucketName:
    Description: S3 Bucket Name
    Type: String
    Default: "venktesh-csye6225-default-s3bucket"
  DBName:
    Description: DB Instance Name
    Type: String
    Default: csye6225
  DBUserName:
    Description: DB Instance UserName
    Type: String
    Default: csye6225
  DBPassword:
    Description: DB Instance Password
    Type: String
    Default: csye6225
  DBInstanceClass:
    Default: db.t3.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  ProfileName:
    Description: Environment Name
    Type: String
    Default: dev
  AwsRegion:
    Description: AWS default region
    Type: String
    Default: us-east-1
  CodeDeployBucket:
    Description: CodeDeployBucket Name
    Type: String
    Default: codedeploy.dev.venktesh.me
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnetA
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnetB
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnetC
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnetA
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnetB
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnetC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn:
      - VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW
  IGAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for RDS Instances
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: applicationSecurityGroup
      GroupDescription: EC2 Application Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: databaseSecurityGroup
      GroupDescription: DB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ApplicationSecurityGroup
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ '', [ !Ref BucketName,'.',!Ref ProfileName,'.venktesh.me' ] ]
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
      LifecycleConfiguration:
        Rules:
          - Id: LifeCycleRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 60
  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: RDS parameter Group
      Family: mysql8.0
      Parameters:
        sql_mode: IGNORE_SPACE
        max_allowed_packet: 1024
      Tags:
        - Key: RDS-ParameterGroup
          Value: MYSQLDB-ParameterGroup
  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    DependsOn:
      - IGAttachment
      - VPC
    Properties:
      Engine: MySQL
      AllocatedStorage: 5
      DBInstanceClass: !Ref DBInstanceClass
      MultiAZ: false
      DBInstanceIdentifier: !Ref DBName
      MasterUsername: !Ref DBUserName
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      DBName: !Ref DBName
      DBParameterGroupName: !Ref RDSParameterGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
  WebAppS3IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:DeleteObject'
            Resource:
              - !Join [ '', [ !GetAtt 'S3Bucket.Arn','/*' ] ]
              - !Join [ '', [ 'arn:aws:s3:::',!Ref CodeDeployBucket,'/*' ] ]
          - Effect: Allow
            Action:
              - 's3:CreateBucket'
              - 's3:DeleteBucket'
            Resource:
              - !GetAtt S3Bucket.Arn
              - !Join [ '', [ 'arn:aws:s3:::',!Ref CodeDeployBucket ] ]
      Roles:
        - !Ref CodeDeployEC2ServiceRole
  CodeDeployEC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployEC2ServiceRole
      Description: IAM Role for WebApp, CodeDeploy and S3
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: EC2InstanceProfile
      Path: "/"
      Roles:
        - !Ref CodeDeployEC2ServiceRole
  asgLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/sdm
            Ebs:
              VolumeSize: !Ref RootVolumeSize
              VolumeType: !Ref RootVolumeType
              DeleteOnTermination: true
        InstanceType: !Ref instanceType
        KeyName: csye6225 cloud
        ImageId: !Ref imageId
        SecurityGroupIds:
          - !Ref ApplicationSecurityGroup
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        UserData:
          Fn::Base64:
            Fn::Sub:
              - |
                #!/bin/bash
                sed -i '/scripts-user/c\ - [scripts-user, always]' /etc/cloud/cloud.cfg
                cd /var/lib/cloud/scripts/per-boot/
                touch reload.sh
                cat > /var/lib/cloud/scripts/per-boot/reload.sh << 'EOF'
                  sudo pm2 reload all --update-env
                EOF
                cat > /etc/environment << 'EOF'
                  PORT=3000
                  NODE_ENV=DEVELOPMENT
                  REGION=${AwsRegion}
                  DB_NAME=${DBName}
                  DB_USERNAME=${DBUserName}
                  DB_PASSWORD=${DBPassword}
                  DB_HOST=${HostName}
                  BUCKET_NAME=${BucketName}.${ProfileName}.venktesh.me
                  MYSQL_PORT=3306
                EOF
                source /etc/profile
                cd /home/ec2-user/webservice
                rm -rf node_modules
                sudo npm i
                sudo systemctl enable webservice
                sudo systemctl start webservice
                sudo pm2 reload all --update-env
              - HostName: !GetAtt MyRDSInstance.Endpoint.Address
  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - MyRDSInstance
      - ApplicationSecurityGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - !Select [ 0, !GetAZs '' ]
        - !Select [ 1, !GetAZs '' ]
        - !Select [ 2, !GetAZs '' ]
      Cooldown: '60'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref asgLaunchTemplate
        Version: !GetAtt asgLaunchTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '1'
      NewInstancesProtectedFromScaleIn: false
      LifecycleHookSpecificationList:
        - LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING"
          LifecycleHookName: "myLaunchLifecycleHook"
          DefaultResult: "CONTINUE"
          HeartbeatTimeout: 60
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
  asgCPUScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref asgWebApp
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: '1'
  AverageCPUAbove5:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Average CPU Utilization above 5%"
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: 5.0
      AlarmActions:
        - !Ref asgCPUScaleOutPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
  asgCPUScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref asgWebApp
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: '-1'
  AverageCPUUnder3:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Average CPU Utilization under 3%"
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      ComparisonOperator: LessThanThreshold
      Threshold: 3.0
      AlarmActions:
        - !Ref asgCPUScaleInPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LoadBalancerSecurityGroup
      GroupDescription: Load Balancer Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - asgWebApp
      - LoadBalancerSecurityGroup
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '3000'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-targetGroup
      Port: 3000
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  DNSConfig:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Join [ '', [ !Ref ProfileName,'.venktesh.me.' ] ]
      RecordSets:
        - Name: !Join [ '', [ !Ref ProfileName,'.venktesh.me.' ] ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
            DNSName: !GetAtt 'LoadBalancer.DNSName'

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployServiceRole
      Description: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"

  csye6225Webapp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: csye6225-webapp
      ComputePlatform: Server

  csye6225WebappDeployment:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - asgWebApp
    Properties:
      ApplicationName: csye6225-webapp
      DeploymentGroupName: csye6225-webapp-deployment
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      AutoScalingGroups:
        - !Sub ${AWS::StackName}-asg
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      Ec2TagSet:
        Ec2TagSetList:
          - Ec2TagGroup:
              - Key: Application
                Value: WebApp
                Type: KEY_AND_VALUE
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
  GHUploadToS3:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GH-Upload-To-S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:Get*'
              - 's3:List*'
            Resource:
              - !Join ['', ['arn:aws:s3:::',!Ref CodeDeployBucket,'/*']]
      Users:
        - ghactions-app

  GHCodeDeploy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GH-Code-Deploy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "codedeploy:RegisterApplicationRevision"
              - "codedeploy:GetApplicationRevision"
            Resource:
              - 'arn:aws:codedeploy:us-east-1:960807583305:csye6225-webapp'
          - Effect: Allow
            Action:
              - "codedeploy:CreateDeployment"
              - "codedeploy:GetDeployment"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "codedeploy:GetDeploymentConfig"
            Resource:
              - "arn:aws:codedeploy:us-east-1:960807583305:deploymentconfig:CodeDeployDefault.OneAtATime"
              - "arn:aws:codedeploy:us-east-1:960807583305:deploymentconfig:CodeDeployDefault.HalfAtATime"
              - "arn:aws:codedeploy:us-east-1:960807583305:deploymentconfig:CodeDeployDefault.AllAtOnce"
      Users:
        - ghactions-app
  ghec2ami:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: gh-ec2-ami
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ec2:AttachVolume"
              - "ec2:AuthorizeSecurityGroupIngress"
              - "ec2:CopyImage"
              - "ec2:CreateImage"
              - "ec2:CreateKeypair"
              - "ec2:CreateSecurityGroup"
              - "ec2:CreateSnapshot"
              - "ec2:CreateTags"
              - "ec2:CreateVolume"
              - "ec2:DeleteKeyPair"
              - "ec2:DeleteSecurityGroup"
              - "ec2:DeleteSnapshot"
              - "ec2:DeleteVolume"
              - "ec2:DeregisterImage"
              - "ec2:DescribeImageAttribute"
              - "ec2:DescribeImages"
              - "ec2:DescribeInstances"
              - "ec2:DescribeInstanceStatus"
              - "ec2:DescribeRegions"
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeSnapshots"
              - "ec2:DescribeSubnets"
              - "ec2:DescribeTags"
              - "ec2:DescribeVolumes"
              - "ec2:DetachVolume"
              - "ec2:GetPasswordData"
              - "ec2:ModifyImageAttribute"
              - "ec2:ModifyInstanceAttribute"
              - "ec2:ModifySnapshotAttribute"
              - "ec2:RegisterImage"
              - "ec2:RunInstances"
              - "ec2:StopInstances"
              - "ec2:TerminateInstances"
            Resource:
              - "*"
      Users:
        - ghactions-app