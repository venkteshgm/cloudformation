AWSTemplateFormatVersion: "2010-09-09"
Description: 
  A stack with VPC, 3 public subnets in 3 different AZs, 3 private subnets in 3 different AZs for RDS, Internet Gateway, 
  public and private route table, EC2 instance with user data, ApplicationSecurityGroup, RDS Instance, DBSecurity group, S3 bucket
Parameters:
  EnvironmentName:
    Description: Account Name
    Type: String
    Default: demo
  AWSRegion:
    Description: AWS default region
    Type: String
    Default: us-east-1
  VpcCIDR:
    Description: CIDR block for VPC
    Type: String
    Default: 10.0.0.0/16
  imageId:
    Description: AMI Instance ID
    Type: String
  profile:
    Description: AWS Profile
    Type: String
    Default: dev
  DBInstanceID:
    Default: "csye6225"
    Description: My database instance
    Type: String
  DBInstanceClass:
    Default: db.t3.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: '50'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '20'
    MaxValue: '65536'
    ConstraintDescription: must be between 20 and 65536 GiB.
  MasterUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    Default: "csye6225"
  MasterPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    Default: "csye6225"
  DBName:
    Default: "csye6225"
    Description: My database
    Type: String
  S3BucketName:
    Description: Customs3 bucket name
    Type: String
    Default: "venktesh-csye6225-s3bucket"
  PublicSubnet1CIDRBlock:
    Description: CIDR block for public Subnet 1
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDRBlock:
    Description: CIDR block for public Subnet 2
    Type: String
    Default: 10.0.2.0/24
  PublicSubnet3CIDRBlock:
    Description: CIDR block for public Subnet 3
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet1CIDRBlock:
    Description: CIDR block for Private Subnet 1
    Type: String
    Default: 10.0.4.0/24
  PrivateSubnet2CIDRBlock:
    Description: CIDR block for Private Subnet 2
    Type: String
    Default: 10.0.5.0/24
  PrivateSubnet3CIDRBlock:
    Description: CIDR block for Private Subnet 3
    Type: String
    Default: 10.0.6.0/24
  RootVolumeSize:
    Description: EBS volume size
    Type: Number
    Default: 20
  RootVolumeType:
    Description: EBS volume type
    Type: String
    Default: gp2
  instanceType:
    Description: EC2 Instance type
    Type: String
    Default: t2.micro
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 
        Ref: VpcCIDR
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: 
            Ref: AWS::StackName
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PublicSubnet1CIDRBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
              - 0
              - !GetAZs
      Tags:
        - Key: Name
          Value: 
            !Join 
              - ""
              - - !Ref AWS::StackName
                - "Public-Subnet-A"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PublicSubnet2CIDRBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
              - 1
              - !GetAZs
      Tags:
        - Key: Name
          Value: 
            !Join
              - ""
              - - !Ref AWS::StackName
                - "Public-Subnet-B"
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PublicSubnet3CIDRBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
              - 2
              - !GetAZs
      Tags:
        - Key: Name
          Value: 
            !Join 
              - "" 
              - - !Ref AWS::StackName
                - "Public-Subnet-C"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: 
            !Join
            - ""
            - - !Ref AWS::StackName
              - "-IG"
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: 
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: Name
          Value: 
            !Join
            - ""
            - - Ref: AWS::StackName
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachGateway
      - VPC
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet3
  
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ApplicationSecurityGroup
      GroupDescription: EC2 Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: 0.0.0.0/0
  # EC2Instance:
  #   Type: AWS::EC2::Instance
  #   DependsOn: 
  #     - MyRDSInstance
  #     - S3Bucket
  #   Properties:
  #     KeyName: csye6225 cloud
  #     BlockDeviceMappings:
  #       - DeviceName: "/dev/xvda"
  #         Ebs:
  #           VolumeType: "gp2"
  #           DeleteOnTermination: "true"
  #           VolumeSize: "20"
  #     InstanceType: "t2.micro"
  #     ImageId: !Ref imageId
  #     SecurityGroupIds:
  #       - !Ref ApplicationSecurityGroup
  #     SubnetId: !Ref PublicSubnet2
  #     IamInstanceProfile: !Ref EC2InstanceProfile
  #     UserData:
  #       Fn::Base64:
  #         !Sub
  #         - |
  #           #!/bin/bash
  #           sed -i '/scripts-user/c\ - [scripts-user, always]' /etc/cloud/cloud.cfg
  #           cd /var/lib/cloud/scripts/per-boot/
  #           touch reload.sh
  #           cat > /var/lib/cloud/scripts/per-boot/reload.sh << 'EOF'
  #             sudo pm2 reload all --update-env
  #           EOF
  #           cat > /etc/environment << 'EOF'
  #             export BUCKET_NAME=${S3BucketName}.${profile}.venktesh.me
  #             export DB_HOST=${RDSInstanceDetail}
  #             export MYSQL_PORT=3306
  #             export DB_PASSWORD=${MasterPassword}
  #             export DB_USERNAME=${MasterUsername}
  #             export DB_NAME=${DBName}
  #             export REGION=${AWS::Region}
  #             export NODE_ENV=DEVELOPMENT
  #             export PORT=3000
  #           EOF
  #           source /etc/profile
  #           cd /home/ec2-user/webservice
  #           rm -rf node_modules
  #           sudo npm i
  #           sudo systemctl enable app
  #           sudo systemctl start app
  #           sudo pm2 reload all --update-env
  #         - RDSInstanceDetail: !GetAtt MyRDSInstance.Endpoint.Address

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PrivateSubnet1CIDRBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
              - 0
              - !GetAZs
      Tags:
        - Key: Name
          Value: 
            !Join 
              - ""
              - - !Ref AWS::StackName
                - "-Private-Subnet-A"
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PrivateSubnet2CIDRBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
              - 1
              - !GetAZs
      Tags:
        - Key: Name
          Value: 
            !Join
              - ""
              - - !Ref AWS::StackName
                - "Private-Subnet-B"
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PrivateSubnet3CIDRBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
              - 2
              - !GetAZs
      Tags:
        - Key: Name
          Value: 
            !Join 
              - "" 
              - - !Ref AWS::StackName
                - "Private-Subnet-C"
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: Name
          Value: 
            !Join
            - ""
            - - Ref: AWS::StackName
              - "PrivateRouteTable"
  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet2
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet3

  # DB Security Group
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Database
      GroupDescription: EC2 Security Group for RDS(Database)
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ApplicationSecurityGroup   
          IpProtocol: tcp    
          FromPort: 3306
          ToPort: 3306          

  # S3 Bucket ----> deletion part, encryption part
  S3Bucket:
    Type: AWS::S3::Bucket
    # DeletionPolicy: By default, if you don't specify a DeletionPolicy, CloudFormation deletes your resources.
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketName: !Join ['', [!Ref S3BucketName,'.',!Ref profile,'.venktesh.me' ]]
      VersioningConfiguration:
        Status: Suspended
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: lifecycle policy for the bucket to transition objects
            Prefix: lifecycle policy for s3 bucket
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA

  # RDS Parameter Group - custom
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: MySQL Parameter Group Custom
      Family: mysql8.0
      Parameters:
        sql_mode: IGNORE_SPACE
        max_allowed_packet: 1024

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: description
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags: 
        - Key: "DBSubnet"
          Value: "-PrivateSubnetGroup"
    
  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      DBInstanceIdentifier: !Ref DBInstanceID
      DBInstanceClass: !Ref DBInstanceClass
      DBParameterGroupName: !Ref DBParameterGroup
      AllocatedStorage: !Ref DBAllocatedStorage
      AvailabilityZone: !Select
              - 1
              - !GetAZs
      MultiAZ: false
      Engine: MySQL
      EngineVersion: 8.0.28
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterPassword
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup

  WebAppS3IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles: 
        - !Ref WebAppS3IAMRole
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - 's3:CreateBucket'
            - 's3:DeleteBucket'
            Resource: !GetAtt 'S3Bucket.Arn'
          - Effect: Allow
            Action:
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
            Resource: !Join ["", [!GetAtt 'S3Bucket.Arn', '/*']]

  WebAppS3IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-CSYE6225
      Description: IAM Role for WebApp and S3
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Tags:
      - Key: IAMRole
        Value: WebAppS3IAMRole

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EC2InstanceProfile
      Path: "/"
      Roles: 
        - !Ref WebAppS3IAMRole


  asgLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    # DependsOn: 
    #   - MyRDSInstance
    #   - S3Bucket
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: /dev/sdm
          Ebs:
            VolumeSize: !Ref RootVolumeSize
            VolumeType: !Ref RootVolumeType
            DeleteOnTermination: true
        ImageId: !Ref imageId
        InstanceType: !Ref instanceType
        KeyName: csye6225 cloud
        SecurityGroupIds:
          - !Ref ApplicationSecurityGroup
        # SubnetId: !Ref PublicSubnet2
        # IamInstanceProfile: !Ref EC2InstanceProfile
        IamInstanceProfile: 
          Name: !Ref EC2InstanceProfile
        UserData:
          Fn::Base64:
            !Sub
            - |
              #!/bin/bash
              sed -i '/scripts-user/c\ - [scripts-user, always]' /etc/cloud/cloud.cfg
              cd /var/lib/cloud/scripts/per-boot/
              touch reload.sh
              cat > /var/lib/cloud/scripts/per-boot/reload.sh << 'EOF'
                sudo pm2 reload all --update-env
              EOF
              cat > /etc/environment << 'EOF'
                export BUCKET_NAME=${S3BucketName}.${profile}.venktesh.me
                export DB_HOST=${RDSInstanceDetail}
                export MYSQL_PORT=3306
                export DB_PASSWORD=${MasterPassword}
                export DB_USERNAME=${MasterUsername}
                export DB_NAME=${DBName}
                export REGION=${AWS::Region}
                export NODE_ENV=DEVELOPMENT
                export PORT=3000
              EOF
              source /etc/profile
              cd /home/ec2-user/webservice
              rm -rf node_modules
              sudo npm i
              sudo systemctl enable app
              sudo systemctl start app
              sudo pm2 reload all --update-env
            - RDSInstanceDetail: !GetAtt MyRDSInstance.Endpoint.Address
  
  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: 
      - MyRDSInstance
      # - S3Bucket
      # - asgLaunchTemplate
      # - PrivateSubnet1
      # - PrivateSubnet2
      # - PrivateSubnet3
      - ApplicationSecurityGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - !Select [ 0, !GetAZs '' ]
        - !Select [ 1, !GetAZs '' ]
        - !Select [ 2, !GetAZs '' ]
      #   - us-east-1a
      #   - us-east-1b
      #   - us-east-1c
      Cooldown: '60'
      DesiredCapacity: '3'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref asgLaunchTemplate
        Version: !GetAtt asgLaunchTemplate.LatestVersionNumber
      # LoadBalancerNames:
      #   - String
      MaxSize: '5'
      MinSize: '3'
      NewInstancesProtectedFromScaleIn: true
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref asgWebApp
      # Cooldown: '1'
      ScalingAdjustment: '1'
  
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 5.0
      AlarmDescription: Go in Alarm if CPU utilization is higher than 5% for 60 seconds
      Period: 60
      AlarmActions:
      - Ref: ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref asgWebApp
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref asgWebApp
      # Cooldown: '1'
      ScalingAdjustment: '-1'
  
  

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 3.0
      AlarmDescription: Go in Alarm if CPU utilization is lower than 3% for 60 seconds
      Period: 60
      AlarmActions:
      - !Ref ScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref asgWebApp
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  
  loadBalancerSecurityGroup:
    # DependsOn:
    # - InternetGateway
    # - AttachGateway
    # - VPC
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: loadBalancerSecurityGroup
      GroupDescription: "Security group for load balancer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
  
  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - asgWebApp
      - loadBalancerSecurityGroup
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref loadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application


  # HostedZone:
  #   Type: AWS::Route53::HostedZone
  #   Properties:
  #     Name: dev.venktesh.me
  #     VPCs:
  #       - VPCId: !Ref VPC
  #         VPCRegion: !Ref 'AWS::Region'
  
  # LoadBalancerAlias:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     AliasTarget:
  #       DNSName: !GetAtt loadBalancer.DNSName
  #       HostedZoneId: !GetAtt loadBalancer.CanonicalHostedZoneID
  #     HostedZoneId: !Ref HostedZone
  #     Name: dev.venktesh.me
  #     Type: A

  # LoadBalancerAlias:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneName: !Join [ '',[!Ref profile,'.venktesh.me']]
  #     AliasTarget:
  #       DNSName: !GetAtt loadBalancer.DNSName
  #       HostedZoneId: !GetAtt loadBalancer.CanonicalHostedZoneID
  #     # HostedZoneId: !Ref HostedZone
  #     Name: !Join [ '',[!Ref profile,'.venktesh.me']]
  #     Type: A

  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '3000'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 3000
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 80
      Protocol: HTTP
  
  route53Record:
    # DependsOn:
      # - HostedZone

      # - loadBalancer
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Join [ '', [ !Ref profile,'.venktesh.me']]
      # Comment: Alias targeted to loadBalancer
      RecordSets:
        - Name: !Join [ '', [ !Ref profile,'.venktesh.me']]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt 'loadBalancer.CanonicalHostedZoneID'
            DNSName: !GetAtt 'loadBalancer.DNSName'